"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .paymentinitiationstandingordermetadata import PaymentInitiationStandingOrderMetadata
from dataclasses_json import Undefined, dataclass_json
from plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentInitiationMetadata:
    r"""Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests."""
    maximum_payment_amount: Dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximum_payment_amount') }})
    r"""A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.

    Example: `{\"GBP\": \"10000\"}`
    """
    standing_order_metadata: Optional[PaymentInitiationStandingOrderMetadata] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standing_order_metadata') }})
    r"""Metadata specifically related to valid Payment Initiation standing order configurations for the institution."""
    supports_international_payments: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supports_international_payments') }})
    r"""Indicates whether the institution supports payments from a different country."""
    supports_refund_details: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supports_refund_details') }})
    r"""Indicates whether the institution supports returning refund details when initiating a payment."""
    supports_sepa_instant: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supports_sepa_instant') }})
    r"""Indicates whether the institution supports SEPA Instant payments."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

