"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .identityverificationdocumentaddressresponse import IdentityVerificationDocumentAddressResponse
from .physicaldocumentcategory import PhysicalDocumentCategory
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhysicalDocumentExtractedData:
    r"""Data extracted from a user-submitted document."""
    address: Optional[IdentityVerificationDocumentAddressResponse] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""The address extracted from the document. The address must at least contain the following fields to be a valid address: `street`, `city`, `country`. If any are missing or unable to be extracted, the address will be null.

    `region`, and `postal_code` may be null based on the addressing system. For example:

    Addresses from the United Kingdom will not include a region

    Addresses from Hong Kong will not include postal code

    Note: Optical Character Recognition (OCR) technology may sometimes extract incorrect data from a document.
    """
    category: PhysicalDocumentCategory = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})
    r"""The type of identity document detected in the images provided. Will always be one of the following values:

      `drivers_license` - A driver's license issued by the associated country, establishing identity without any guarantee as to citizenship, and granting driving privileges

      `id_card` - A general national identification card, distinct from driver's licenses as it only establishes identity

      `passport` - A travel passport issued by the associated country for one of its citizens

      `residence_permit_card` - An identity document issued by the associated country permitting a foreign citizen to <em>temporarily</em> reside there

      `resident_card` - An identity document issued by the associated country permitting a foreign citizen to <em>permanently</em> reside there

      `visa` - An identity document issued by the associated country permitting a foreign citizen entry for a short duration and for a specific purpose, typically no longer than 6 months

    Note: This value may be different from the ID type that the user selects within Link. For example, if they select \"Driver's License\" but then submit a picture of a passport, this field will say `passport`
    """
    date_of_birth: Optional[date] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    r"""A date extracted from the document in the format YYYY-MM-DD (RFC 3339 Section 5.6)."""
    expiration_date: Optional[date] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    r"""A date in the format YYYY-MM-DD (RFC 3339 Section 5.6)."""
    id_number: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id_number') }})
    r"""Alpha-numeric ID number extracted via OCR from the user's document image."""
    issuing_country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuing_country') }})
    r"""Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form."""
    issuing_region: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuing_region') }})
    r"""An ISO 3166-2 subdivision code. Related terms would be \\"state\\", \\"province\\", \\"prefecture\\", \\"zone\\", \\"subdivision\\", etc."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

