"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .documentdateofbirthmatchcode import DocumentDateOfBirthMatchCode
from .documentnamematchcode import DocumentNameMatchCode
from .expirationdate import ExpirationDate
from .issuingcountry import IssuingCountry
from dataclasses_json import Undefined, dataclass_json
from plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PhysicalDocumentExtractedDataAnalysis:
    r"""Analysis of the data extracted from the submitted document."""
    UNSET='__SPEAKEASY_UNSET__'
    date_of_birth: DocumentDateOfBirthMatchCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_of_birth') }})
    r"""A match summary describing the cross comparison between the subject's date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt."""
    expiration_date: ExpirationDate = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration_date') }})
    r"""A description of whether the associated document was expired when the verification was performed.

    Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
    """
    issuing_country: IssuingCountry = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuing_country') }})
    r"""A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.

    Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
    """
    name: DocumentNameMatchCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""A match summary describing the cross comparison between the subject's name, extracted from the document image, and the name they separately provided to identity verification attempt."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

