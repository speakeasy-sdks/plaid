"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JWKPublicKey:
    r"""A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks"""
    UNSET='__SPEAKEASY_UNSET__'
    alg: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alg') }})
    r"""The alg member identifies the cryptographic algorithm family used with the key."""
    created_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The timestamp when the key was created, in Unix time."""
    crv: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crv') }})
    r"""The crv member identifies the cryptographic curve used with the key."""
    expired_at: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired_at') }})
    r"""The timestamp when the key expired, in Unix time."""
    kid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kid') }})
    r"""The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover."""
    kty: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kty') }})
    r"""The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC."""
    use: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use') }})
    r"""The use (public key use) parameter identifies the intended use of the public key."""
    x: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('x') }})
    r"""The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation."""
    y: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('y') }})
    r"""The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

