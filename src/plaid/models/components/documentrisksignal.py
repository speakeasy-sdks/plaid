"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .documentrisksignalinstitutionmetadata import DocumentRiskSignalInstitutionMetadata
from dataclasses_json import Undefined, dataclass_json
from plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DocumentRiskSignal:
    r"""Details about a certain reason as to why a document could potentially be fraudulent."""
    actual_value: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actual_value') }})
    r"""The derived value obtained in the risk signal calculation process for this field"""
    expected_value: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expected_value') }})
    r"""The expected value of the field, as seen on the document"""
    field: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field') }})
    r"""The field which the risk signal was computed for"""
    has_fraud_risk: Optional[bool] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_fraud_risk') }})
    r"""A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent"""
    institution_metadata: Optional[DocumentRiskSignalInstitutionMetadata] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('institution_metadata') }})
    r"""An object which contains additional metadata about the institution used to compute the verification attribute"""
    page_number: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_number') }})
    r"""The relevant page associated with the risk signal"""
    signal_description: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signal_description') }})
    r"""A human-readable explanation providing more detail into the particular risk signal"""
    type: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The result from the risk signal check."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

