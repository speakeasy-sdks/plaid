"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .accountbase import AccountBase
from .investmenttransaction import InvestmentTransaction
from .item import Item
from .security import Security
from dataclasses_json import Undefined, dataclass_json
from plaid import utils
from typing import Any, Dict, List, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvestmentsTransactionsGetResponse:
    r"""InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get`"""
    accounts: List[AccountBase] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts') }})
    r"""The accounts for which transaction history is being fetched."""
    investment_transactions: List[InvestmentTransaction] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_transactions') }})
    r"""The transactions being fetched"""
    item: Item = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item') }})
    r"""Metadata about the Item."""
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive."""
    securities: List[Security] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securities') }})
    r"""All securities for which there is a corresponding transaction being fetched."""
    total_investment_transactions: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_investment_transactions') }})
    r"""The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

