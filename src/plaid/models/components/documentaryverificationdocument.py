"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from .documentanalysis import DocumentAnalysis
from .documentstatus import DocumentStatus
from .physicaldocumentextracteddata import PhysicalDocumentExtractedData
from .physicaldocumentimages import PhysicalDocumentImages
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DocumentaryVerificationDocument:
    r"""Images, extracted data, and analysis from a user's identity document"""
    analysis: DocumentAnalysis = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analysis') }})
    r"""High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected."""
    attempt: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attempt') }})
    r"""The `attempt` field begins with 1 and increments with each subsequent document upload."""
    extracted_data: Optional[PhysicalDocumentExtractedData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extracted_data') }})
    r"""Data extracted from a user-submitted document."""
    images: PhysicalDocumentImages = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images') }})
    r"""URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires."""
    redacted_at: Optional[datetime] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redacted_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""An ISO8601 formatted timestamp."""
    status: DocumentStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    

