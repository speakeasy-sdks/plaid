"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from plaid import utils
from typing import Any, Dict, Optional

class State(str, Enum):
    r"""The state, or status, of the deposit switch.

    - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.

    - `processing` – The deposit switch request has been submitted and is being processed.

    - `completed` – The user's employer has fulfilled the deposit switch request.

    - `error` – There was an error processing the deposit switch request.
    """
    INITIALIZED = 'initialized'
    PROCESSING = 'processing'
    COMPLETED = 'completed'
    ERROR = 'error'

class SwitchMethod(str, Enum):
    r"""The method used to make the deposit switch.

    - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.

    - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.

    - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
    """
    INSTANT = 'instant'
    MAIL = 'mail'
    PDF = 'pdf'
    LESS_THAN_NIL_GREATER_THAN_ = '<nil>'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DepositSwitchGetResponse:
    r"""DepositSwitchGetResponse defines the response schema for `/deposit_switch/get`"""
    account_has_multiple_allocations: Optional[bool] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_has_multiple_allocations') }})
    r"""When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed."""
    amount_allocated: Optional[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_allocated') }})
    r"""The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed."""
    date_completed: Optional[date] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_completed'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    r"""[ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed."""
    date_created: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_created'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    r"""[ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created."""
    deposit_switch_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deposit_switch_id') }})
    r"""The ID of the deposit switch."""
    is_allocated_remainder: Optional[bool] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_allocated_remainder') }})
    r"""When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed."""
    percent_allocated: Optional[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percent_allocated') }})
    r"""The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true."""
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id') }})
    r"""A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive."""
    state: State = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""The state, or status, of the deposit switch.

    - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.

    - `processing` – The deposit switch request has been submitted and is being processed.

    - `completed` – The user's employer has fulfilled the deposit switch request.

    - `error` – There was an error processing the deposit switch request.
    """
    target_account_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_account_id') }})
    r"""The ID of the bank account the direct deposit was switched to."""
    target_item_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('target_item_id') }})
    r"""The ID of the Item the direct deposit was switched to."""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    employer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_id') }})
    r"""The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`."""
    employer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer_name') }})
    r"""The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`."""
    institution_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('institution_id') }})
    r"""The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`."""
    institution_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('institution_name') }})
    r"""The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`."""
    switch_method: Optional[SwitchMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switch_method') }})
    r"""The method used to make the deposit switch.

    - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.

    - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.

    - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
    """
    

